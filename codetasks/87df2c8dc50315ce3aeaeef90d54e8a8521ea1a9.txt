### Problem

The JavaScript-expression module lets users compile a textual expression into a JVM
class whose `evaluate()` method executes the expression.
Functions such as `sqrt()` or `abs()` are supplied to the compiler as a map
`Map<String,MethodHandle> functions`.

Up to now a custom bootstrap method (`dynamicConstantBootstrap`) was used to put
those `MethodHandle`s into the generated byte-code.  
This task removes that private bootstrap and switches to the official
`java.lang.constant.ConstantDescs.BSM_CLASS_DATA_AT` bootstrap that accesses the
class-data array created by
`MethodHandles.Lookup#defineHiddenClassWithClassData(byte[],Object,boolean)`.

Your job is to finish the refactor so that:

* Every call to a user function is compiled into a **dynamic constant** whose
  bootstrap is `BSM_CLASS_DATA_AT`.  
  The constantâ€™s argument is the *index* (int) of the requested function inside
  the class-data list.
* A single `MethodHandle` must be stored **only once** in that list even if the
  function is referenced multiple times in the same expression.  
  Repeated occurrences therefore have to reuse the same dynamic constant (same
  index).
* At class creation time a contiguous list of the required `MethodHandle`s has
  to be passed as class data to
  `Lookup#defineHiddenClassWithClassData`.  The position within this list is the
  index passed to the bootstrap.
* The bespoke method `dynamicConstantBootstrap` and every reference to it have
  to be removed; the compiler must now rely solely on the standard
  `BSM_CLASS_DATA_AT`.
* All public behaviour of `org.apache.lucene.expressions.js.JavascriptCompiler`
  remains unchanged: valid expressions continue to compile and evaluate, custom
  functions still work, and all existing unit tests (including the new
  `testSameFunctionTwoTimes`) pass.

No other module needs to be modified.